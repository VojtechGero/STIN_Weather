@using STIN_Weather.WeatherReportUtils
@using STIN_Weather.Data
@using LeafletForBlazor
@rendermode InteractiveServer
<RealTimeMap 
    height="460px" 
    width="550px" 
    OnClickMap="onClickMap" 
    OnAfterMapLoaded="onLoadControl" 
    @ref ="map"
    Parameters="@parameters"
></RealTimeMap>

@code {
    [Parameter]
    public EventCallback<Coordinates> OnCoordinatesCreated { get; set; }

    private double longitude { get; set; } = 15.07;
    private double latitude { get; set; } = 50.77;
    RealTimeMap map;
    RealTimeMap.PointSymbol symbol = null;
    RealTimeMap.LoadParameters parameters = null;
    public async Task onLoadControl(RealTimeMap.MapEventArgs value)
    {
        await value.sender.movePoint([latitude, longitude], symbol);
    }
    protected override async Task OnInitializedAsync()
    {
        if(symbol is null)
        {
            symbol = MapUtils.GetSymbol();
        }
        if(parameters is null)
        {
            parameters = MapUtils.GetParameters();
        }
        var Coords = new Coordinates(latitude, longitude);
        await OnCoordinatesCreated.InvokeAsync(Coords);
        await base.OnInitializedAsync();
    }
    async Task onClickMap(RealTimeMap.ClicksMapArgs value)
    {
        latitude = value.location.latitude;
        longitude = value.location.longitude;
        var Coords = new Coordinates(latitude, MapUtils.formatLongitude(longitude));
        await value.sender.movePoint(Coords.toArray(), symbol);
        await OnCoordinatesCreated.InvokeAsync(Coords);
    }
    public async Task MovePoint(Coordinates coords)
    {
        await map.movePoint(coords.toArray(), symbol);
    }
    
}
