@using STIN_Weather.WeatherReportUtils
@using STIN_Weather.Data

@if (data is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Max Temp. (C)</th>
                <th>Precipitation sum</th>
                <th>Weather Code</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < data.Count;i++)
            {
                <tr>
                    <td>@dates[i]</td>
                    <td>@data[i].temperatureMax</td>
                    <td>@data[i].precipitationSum</td>
                    <td>@data[i].description</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (error)
{
    <p>No data for chosen coordinates</p>
}


@code
{
    [Parameter]
    public Coordinates c {get; set;}
    [Parameter]
    public int historic { get; set; } = 0;
    List<DailyForecast> data { get; set; }
    WeatherApi api { get; set; }
    RequestBuilder builder;
    bool error = false;
    List<string> dates=new List<string>();
    protected override async Task OnInitializedAsync()
    {
        api = new WeatherApi();
    }
    protected override async Task OnParametersSetAsync()
    {
        builder = new RequestBuilder(c)
            .DailyWeatherCode()
            .DailyTemperatureMax()
            .DailyPrecipitationSum();
        if (historic > 0)
        {
            builder.HistoricDays(historic);
        }
        
        try
        {
            data = await api.requestWeather(builder.GetRequest());
            DateOnly today = DateOnly.FromDateTime(DateTime.Now);
            foreach (var i in data.Select(x=>x.date).ToList())
            {
                string s = $"{i} ({i.DayOfWeek.ToString().Substring(0,3)})";
                if (i == today)
                {
                    s += " (Today)";
                }
                dates.Add(s);
            }
            error = false;
        }
        catch (HttpRequestException)
        {
            data = null;
            error = true;
        }
        finally
        {
            await base.OnParametersSetAsync();
        }
    }
    
}