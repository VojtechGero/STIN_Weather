@page "/"
@using STIN_Weather.WeatherReportUtils
@using STIN_Weather.Data
@using LeafletForBlazor
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject JsonFileUserStore users
@rendermode InteractiveServer


<PageTitle>Home</PageTitle>
<h1>Weather Report</h1>
<h1>@user</h1>
<div class="maplocs">
    <div class="map">
        <MapView
            OnCoordinatesCreated="OnCoordinatesCreated" 
            @ref="map"/>
    </div>
    <div class="controls-table">
        <div class="controls">
            <div>
                <button class="btn btn-primary" @onclick="showWeatherClick">Show weather:</button>
            </div>
            <div class="location-name">
                <AuthorizeView>
                    <button class="btn btn-primary" @onclick="SaveLocationClick">Save location</button>
                    <label class="form-label" for="locName">Name:</label>
                    <input @bind="@text" id="locName"/>
                </AuthorizeView>
            </div>
            <div class="check">
                <div>
                    <AuthorizeView>
                        <label class="form-check-label" for="historic" >Historic data:</label>
                        <input type="checkbox" id="historic" class="form-check-input" @bind="@historicData">
                    </AuthorizeView>
                </div>
            </div>
            
        </div>
        @if (locations.Any())
        {
            <LocationsTable OnRemoveLocation="RemoveLocation"
                            OnShowLocation="ShowLocation"
                            locations="locations" />
        }
    </div>
</div>

@if (showWeather)
{
    <div>
        <hr />
        <WeatherRespose c="OutgoingCoords" historic="historic"/>
    </div>
}

@code{
    public bool historicData { get; set; } = false;
    public bool showWeather { get; set; } = false;
    public Coordinates OutgoingCoords { get; set; }
    public int historic = 0;
    public Coordinates Coords { get; set; }
    ApplicationUser user;
    public List<SavedLocation> locations = new List<SavedLocation>();
    MapView map;
    public string text = "";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(authState.User);
        if(user is not null)
        {
            locations = user.savedLocations;
        }
        await base.OnInitializedAsync();
    }
    async Task SaveLocationClick()
    {

        if (user.savedLocations is null)
        {
            user.savedLocations = new List<SavedLocation>();
        }
        int id = locations.Count + 1;
        string name = WeatherUtils.GetUniqueName(text, locations);
        var newLocation = new SavedLocation(Coords, name, id);
        user.savedLocations.Add(newLocation);
        locations = user.savedLocations;
        users.UpdateAsync(user, new CancellationToken());
    }
    async Task OnCoordinatesCreated(Coordinates IncomingCoords)
    {
        Coords = IncomingCoords;
    }
    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(authState.User);
        if(user is not null)
        {
            locations = user.savedLocations;
        }
        await base.OnParametersSetAsync();
    }
    void showWeatherClick()
    {
        (OutgoingCoords, historic, showWeather) = WeatherUtils.ShowWeatherTable(Coords, historicData);
    }
    private async Task RemoveLocation(int id)
    {
        user.savedLocations = locations = WeatherUtils.removeLocation(id,locations);
        users.UpdateAsync(user, new CancellationToken());
    }
    private async Task ShowLocation(Coordinates coords)
    {

        map.MovePoint(coords);
        (OutgoingCoords, historic, showWeather) = WeatherUtils.ShowWeatherTable(coords, historicData);
    }
}